(function(){"use strict";const w=e=>e.trim().split(`
`).map(c=>c.split(",").map(o=>o.trim())),g=e=>!isNaN(parseFloat(e))&&isFinite(Number(e)),y=e=>{const c=w(e),[o,...C]=c,u=o.findIndex(t=>t.toLowerCase()==="date"),p=o.findIndex(t=>t.toLowerCase()==="amount"),f=o.findIndex(t=>t.toLowerCase()==="category");if(u===-1||p===-1||f===-1)throw new Error("CSV must contain Date, Amount, and Category columns");let i=0,l=0,a=null,s=null;const d={};for(const t of C){const m=t[u],x=t[p],F=t[f]||"Uncategorized";if(!g(x))continue;const r=parseFloat(x),n=new Date(m).getTime();isNaN(n)||((a===null||n<a)&&(a=n),(s===null||n>s)&&(s=n),r>0?i+=r:l+=Math.abs(r),d[F]=(d[F]||0)+r)}const I=Object.entries(d).map(([t,m])=>({category:t,value:parseFloat(m.toFixed(2))}));return{fromDate:a??0,toDate:s??0,totalIncome:parseFloat(i.toFixed(2)),totalExpenses:parseFloat(l.toFixed(2)),nett:parseFloat((i-l).toFixed(2)),nettByCategory:I}};(()=>{console.log("Finance Library loaded.");const e={processCSVStatement:y};window.Parser=e})()})();
